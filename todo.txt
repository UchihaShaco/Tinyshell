Redirection rules
-in general, the last input and last output are given to the cmd
-output 
	if both > and >> are present and point to the same file, > takes precedence not matter the order
-input 
	all files are opened even if they are not the final input
	if both < and << are present, the last one will be counted as the file - they can point to the same "filename" because << points to a delimiter rather than a file
< = 2
> = 3
>> = 4
<< = 5

Finalize data
.1. modify cmd
	-modify char **file -
	-modify int *redir -
	-create char **hd_array - 
	-create int count_hd -c
	-create int *fd_array -
	-create int record_hd -
	-create int last_output -
	-create int_last_input -
	-create char *path -
2. modify data (init only)
	-ft_bzero data -
	-create_env_list - 
	-create env_paths - 
	-create int **fd - 
	-create int	*pid -
	-deleted home_dir: use function find_home_dir -
3. Builtins
	1. Echo
	2. Env
	3. cd
		what happens if OLDPWD and PWD are unset? - in wsl, they are just not updated
	4. Export
		-when OLDPWD and PWD are restored via export, they automatically contain values
		-modify our_env based on env_list
		-modify env_paths based on env_list
	5. Unset
	NOTES:
		-cd with pipes does nothing
	-to find home directory, iterate through envirnonmental variable
4. execution
	-show directory change in prompt
	-take care of Exec errorsaa

FILES added:
mod_cmd.c
utils_h.c
free.c
testers.c
heredoc.c
data.c
env.c
execution.c
builtin folder

NOTES to discuss: 
-ts_malloc.c -> this can probably be reduced to one function -> see ft_calloc_e
-ts_cound_and_record_cmd.c -> if you use calloc, no need to intialize to NULL and 0 (tcmd){}
-ts_malloc_cmd ->why size + 1? This is an array of cmd, so the last one is not a pointer but rather an empty cmd struct
-ts_found_dollar ->deleted data->home_dir; used find_home_dir to find home directory
-ts_init_env -> what is special about shlvl?
-ts_pars -> i = 0; also added create_fd_pid_array
NOTES:
-Tilde Expansion
If a word begins with an unquoted tilde character (`~'), all of the characters preceding the first unquoted slash (or all characters,
if there is no unquoted slash) are considered a tilde-prefix. If none of the characters in the tilde-prefix are quoted, the characters 
in the tilde-prefix following the tilde are treated as a possible login name. If this login name is the null string, the tilde is replaced 
with the value of the shell parameter HOME. 

ERRORS
-bash: warning: here-document at line 116 delimited by end-of-file (wanted `hello')
-bash: grep: NO such file or directory
-bash: cd: /home/hbui-vu:/mnt/c: No such file or directory